"""
Module de transfert des r√©sum√©s de la base PostgreSQL vers RabbitMQ.

Ce script lit les r√©sum√©s stock√©s dans la table longresume et les injecte 
dans la queue RabbitMQ pour traitement ult√©rieur.
"""

import os
import logging
import json
import traceback
import pika

# Charger les variables d'environnement
from dotenv import load_dotenv
load_dotenv(dotenv_path=os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

def get_rabbitmq_connection():
    """
    √âtablit une connexion √† RabbitMQ.
    
    Returns:
        pika.BlockingConnection: Connexion RabbitMQ
    """
    try:
        # R√©cup√©ration des variables d'environnement
        RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'localhost')
        RABBITMQ_PORT = int(os.getenv('RABBITMQ_PORT', 5672))
        RABBITMQ_USER = os.getenv('RABBITMQ_USER', 'guest')
        RABBITMQ_PASSWORD = os.getenv('RABBITMQ_PASSWORD', 'guest')
        
        # Param√®tres de connexion
        credentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASSWORD)
        parameters = pika.ConnectionParameters(
            host=RABBITMQ_HOST, 
            port=RABBITMQ_PORT, 
            credentials=credentials
        )
        
        # √âtablir la connexion
        connection = pika.BlockingConnection(parameters)
        logger.info(f"‚úÖ Connexion r√©ussie √† RabbitMQ sur {RABBITMQ_HOST}:{RABBITMQ_PORT}")
        
        return connection
    
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion √† RabbitMQ : {e}")
        logger.error(f"D√©tails de l'erreur : {traceback.format_exc()}")
        raise

def transfer_query_reponse_to_rabbitmq(
    source_node_id: str = "16204433116771456015", 
    target_node_id: str = "3091293945615310311", 
    description: str = "Requ√™te de test pour transfert RabbitMQ",
    queue_name: str = 'queue_vinh_test'
):
    """
    Transfert un message de requ√™te vers RabbitMQ avec des param√®tres hardcod√©s.
    
    :param source_node_id: ID du n≈ìud source
    :param target_node_id: ID du n≈ìud cible
    :param description: Description de la requ√™te
    :param queue_name: Nom de la queue RabbitMQ
    """
    try:
        # √âtablir la connexion RabbitMQ
        connection = get_rabbitmq_connection()
        channel = connection.channel()
        
        # D√©clarer la queue
        channel.queue_declare(queue=queue_name, durable=True)
        
        # Pr√©parer le message
        message = {
            "type": "query",
            "source_node": source_node_id,
            "target_node": target_node_id,
            "description": description
        }
        
        # Convertir le message en JSON
        message_body = json.dumps(message, ensure_ascii=False)
        
        # Publier le message
        channel.basic_publish(
            exchange='',
            routing_key=queue_name,
            body=message_body,
            properties=pika.BasicProperties(
                delivery_mode=2,  # Rendre le message persistant
            )
        )
        
        logger.info(f"‚úÖ Message transf√©r√© vers RabbitMQ (queue: {queue_name})")
        logger.info(f"üì® Message: {message}")
        
        # Fermer la connexion
        connection.close()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du transfert vers RabbitMQ : {e}")
        logger.error(traceback.format_exc())

def main():
    """Point d'entr√©e principal du script"""
    try:
        transfer_query_reponse_to_rabbitmq()
    except Exception as e:
        logger.error(f"Erreur d'ex√©cution : {e}")

if __name__ == "__main__":
    main()

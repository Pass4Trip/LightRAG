import sys
import os
import subprocess
import logging
from pathlib import Path

# Configuration du logging pour r√©duire la verbosit√©
logging.basicConfig(
    level=logging.INFO,  # Niveau de log moins d√©taill√©
    format='%(asctime)s - %(levelname)s: %(message)s',
    datefmt='%H:%M:%S'  # Format de date plus court
)
logger = logging.getLogger(__name__)

def install_dependencies():
    """
    Installe les d√©pendances n√©cessaires
    """
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--break-system-packages", "python-dotenv", "pymilvus", "pymongo", "neo4j"])
        logger.info("‚úÖ D√©pendances install√©es avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'installation des d√©pendances : {e}")
        sys.exit(1)

def run_clear_script(script_path):
    """
    Ex√©cute un script de suppression de base de donn√©es
    
    Args:
        script_path (str): Chemin absolu du script √† ex√©cuter
    """
    try:
        logger.info(f"üî• Ex√©cution du script : {os.path.basename(script_path)}")
        
        # V√©rifier si le script existe
        if not os.path.exists(script_path):
            logger.error(f"‚ùå Le script {script_path} n'existe pas")
            return
        
        # V√©rifier les permissions du script
        if not os.access(script_path, os.X_OK):
            logger.error(f"‚ùå Le script {script_path} n'est pas ex√©cutable")
            return
        
        # Ex√©cuter le script avec Python et capturer les erreurs
        result = os.system(f"python3 {script_path}")
        
        if result == 0:
            logger.info(f"‚úÖ Script {os.path.basename(script_path)} ex√©cut√© avec succ√®s")
        else:
            logger.error(f"‚ùå Erreur lors de l'ex√©cution de {os.path.basename(script_path)}")
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution de {script_path}: {e}")

def main():
    # Installer les d√©pendances
    install_dependencies()
    
    # Chemins des scripts de suppression de base de donn√©es
    base_path = Path(__file__).parent.parent
    
    scripts = [
        base_path / "milvus_docker" / "clear_database.py",
        base_path / "mongodb_docker" / "clear_database.py",
        base_path / "neo4j_microk8s" / "clear_database.py"
    ]
    
    logger.info("üßπ D√©but du nettoyage de toutes les bases de donn√©es")
    
    for script in scripts:
        if script.exists():
            run_clear_script(str(script))
        else:
            logger.error(f"‚ùå Script non trouv√© : {script}")
    
    logger.info("\nüéâ Nettoyage des bases de donn√©es termin√©")

if __name__ == "__main__":
    main()
